on:
  workflow_call:
    inputs:
      target_environment:
        required: true
        type: string
      aws_region:
        required: true
        type: string
      api_core_version:
        required: false
        type: string
      ecr_repository:
        required: true
        type: string
      ecs_service:
        required: true
        type: string
      tag_latest:
        required: false
        type: boolean
        default: false
      tag:
        required: true
        type: string
      enable_cache:
        required: false
        type: boolean
        default: true
      build_args:
        required: false
        type: string
      target:
        required: false
        type: string
    secrets:
      ecr_access_key:
        required: true
      ecr_secret_access_key:
        required: true
    outputs:
      image:
        description: The image tag that has been pushed to the ECR. This is basically the merged ecr_repository/ecs_service:tag input variables
        value: ${{ jobs.build.outputs.image }}

permissions:
  contents: read

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    environment: ${{ inputs.target_environment }}
    outputs:
      image: ${{ steps.build-image.outputs.image }}
    env:
      AQ_API_CORE_VERSION: ${{ inputs.api_core_version }}
      ECR_REPOSITORY: ${{ inputs.ecr_repository }}
      ECS_SERVICE: ${{ inputs.ecs_service }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials for ECR upload
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ecr_access_key }}
          aws-secret-access-key: ${{ secrets.ecr_secret_access_key }}
          aws-region: ${{ inputs.aws_region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Image with Ref Tag
        id: build-and-tag
        if: ${{ !inputs.target }}
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: ${{ inputs.ecr_repository }}/${{inputs.ecs_service }}:${{ inputs.tag }}
          build-args: ${{ inputs.build_args }}
          context: .
          # cache-from: type=gha
          # cache-to: type=gha,mode=max

      - name: Build Image with Latest Tag
        id: build-with-latest
        if: ${{ !inputs.target && inputs.tag_latest == true }}
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: ${{ inputs.ecr_repository }}/${{inputs.ecs_service }}:latest
          build-args: ${{ inputs.build_args }}
          context: .
          # cache-from: type=gha
          # cache-to: type=gha,mode=max

      - name: Build Image to Target with Ref Tag
        id: build-target-and-tag
        if: ${{ inputs.target }}
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: ${{ inputs.ecr_repository }}/${{inputs.ecs_service }}:${{ inputs.tag }}
          build-args: ${{ inputs.build_args }}
          context: .
          # cache-from: type=gha
          # cache-to: type=gha,mode=max
          target: ${{ inputs.target }}

      - name: Build Image to Target with Latest Tag
        id: build-target-with-latest
        if: ${{ inputs.target && inputs.tag_latest == true }}
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: ${{ inputs.ecr_repository }}/${{inputs.ecs_service }}:latest
          build-args: ${{ inputs.build_args }}
          context: .
          # cache-from: type=gha
          # cache-to: type=gha,mode=max
          target: ${{ inputs.target }}
